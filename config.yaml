# SGFA qMAP-PD Configuration File
# Complete configuration with documentation and examples
# See docs/configuration.md for detailed documentation

# =============================================================================
# REQUIRED CONFIGURATION SECTIONS
# =============================================================================

# Data Configuration (REQUIRED)
# Specifies data sources and loading parameters
data:
  data_dir: "./qMAP-PD_data"              # REQUIRED: Path to data directory (must exist)
  clinical_file: "data_clinical/clinical.tsv"  # OPTIONAL: Clinical data file
  volume_dir: "volume_matrices"            # OPTIONAL: Volume matrices directory
  imaging_as_single_view: true            # OPTIONAL: Concatenate all imaging data (default: true)

# Experiment Configuration (REQUIRED)
# Controls experiment execution and output handling
experiments:
  base_output_dir: "./results"            # REQUIRED: Output directory for all results
  save_intermediate: false                # OPTIONAL: Save intermediate results for debugging (default: false, disk intensive)
  generate_plots: true                    # OPTIONAL: Generate visualization plots (default: true)
  enable_spatial_analysis: false         # OPTIONAL: Enable spatial analysis (requires MRI reference, default: false)
  save_pickle_results: false             # OPTIONAL: Save pickle files (can be large, default: false)
  save_numpy_arrays: false               # OPTIONAL: Save numpy arrays to disk (not human-readable, default: false)
  max_parallel_jobs: 2                   # OPTIONAL: Maximum parallel experiments (1-16, default: 1)

  # Spatial Remapping Configuration (OPTIONAL)
  enable_spatial_remapping: false         # OPTIONAL: Remap factor loadings to brain space (default: false)
  save_brain_maps: true                   # OPTIONAL: Save brain maps as CSV files (default: true)
  create_brain_map_plots: false           # OPTIONAL: Create 3D visualization plots (default: false)
  brain_maps_output_dir: "brain_maps"     # OPTIONAL: Subdirectory for brain maps (default: "brain_maps")

  # NOTE: SGFA results caching is automatically enabled when running multiple experiments
  # Results are cached in: {base_output_dir}/.sgfa_cache/
  # Cache is cleared automatically after pipeline completes
  # This significantly reduces runtime by reusing SGFA results with identical hyperparameters


# Model Configuration (REQUIRED)
# Defines model type and core hyperparameters
model:
  model_type: "sparse_gfa"               # REQUIRED: "sparse_gfa" or "standard_gfa"
  K: 20                                  # REQUIRED: Number of latent factors (1-50 recommended)

  # MCMC Parameters (OPTIONAL with defaults)
  num_samples: 2000                      # MCMC samples (10-50000, default: 1000)
  num_warmup: 1000                       # MCMC warmup steps (default: 500)
  num_chains: 1                          # MCMC chains (1-8, default: 2) - reduced to 1 for GPU memory

  # Sparsity Parameters (REQUIRED for sparse_gfa)
  sparsity_lambda: 0.05                  # Sparsity penalty (≥0, typically 0.01-1.0)
  group_lambda: 0.1                      # OPTIONAL: Group sparsity penalty

  # Regularized Horseshoe Prior Hyperparameters (GLOBAL - used by all experiments)
  # These control sparsity and shrinkage behavior across the entire pipeline
  percW: 33                              # Element-wise sparsity level (% non-zero loadings, 10-50 typical)
  slab_df: 4                             # Slab degrees of freedom for regularized horseshoe (3-10 typical)
  slab_scale: 2                          # Slab scale for regularized horseshoe (1-5 typical)
  reghsZ: true                           # Apply regularized horseshoe to latent factors Z

  # Random Seed (OPTIONAL)
  random_seed: 42                        # Random seed for reproducible results

# =============================================================================
# OPTIONAL CONFIGURATION SECTIONS (All have sensible defaults)
# =============================================================================

# Preprocessing Configuration (OPTIONAL)
# Controls data preprocessing and feature selection
preprocessing:
  # Default: no feature selection, no PCA (use all voxels)
  # For PCA: use strategy: "pca_balanced", "pca_aggressive", or "pca_conservative" (see data_validation section)
  strategy: "full_preprocessing_all_views"  # Apply feature selection to ALL views (imaging + clinical)
  enable_advanced_preprocessing: true   # Enable smart preprocessing for speed
  enable_spatial_processing: false      # Spatial processing (harmonization, etc) - can be slow
  imputation_strategy: "median"         # Handle missing values without removing voxels

  # Feature selection - ROI-aware for interpretability
  # NOTE: Feature selection preserves spatial remapping through selected voxel indices
  feature_selection_method: "none"      # Skip feature selection - use all voxels (can also use "variance" to filter uninformative voxels)
  variance_threshold: 0.02              # Remove voxels with <2% variance (only used if feature_selection_method="variance")
  missing_threshold: 0.8                # Remove voxels with >80% missing data

  # ROI-aware selection (preserves proportional representation from each brain region)
  roi_based_selection: true             # Enable ROI-aware feature selection
  n_top_features: null                  # Use variance_threshold instead of fixed count (more adaptive per ROI)
  min_voxel_distance: 3.0               # Minimum distance between selected voxels (spatial distribution)

  # Confound handling (NEW)
  drop_confounds_from_clinical: true    # Drop confounds from clinical view (vs residualize)

  # PCA Dimensionality Reduction (OPTIONAL)
  # NOTE: For optimized PCA configs based on MAD elbow analysis, use the pre-configured strategies:
  #   - strategy: "pca_balanced"      → 85% variance, ~120 components (RECOMMENDED)
  #   - strategy: "pca_aggressive"    → 80% variance, ~90 components (best N/D ratio)
  #   - strategy: "pca_conservative"  → 90% variance, ~150 components (more information)
  enable_pca: false                     # Enable PCA dimensionality reduction
  pca_n_components: null                # Fixed number of components (null = use variance threshold)
  pca_variance_threshold: 0.95          # Retain 95% of variance (only used if pca_n_components is null)
  pca_whiten: false                     # Whiten PCA components (normalize variance)

# Cross-Validation Configuration (OPTIONAL)
# Configures model evaluation and validation
cross_validation:
  n_folds: 10                           # Number of CV folds (2-20, recommended: 5-10)
  n_repeats: 3                          # Number of CV repeats (1-10, recommended: 1-3)
  stratified: true                      # Use stratified CV for imbalanced data
  group_aware: false                    # Use group-aware CV for multi-site data
  random_seed: 42                       # Random seed for CV splits

# Monitoring Configuration (OPTIONAL)
# Controls logging, checkpointing, and progress monitoring
monitoring:
  checkpoint_dir: "./results/checkpoints"  # Checkpoint directory
  log_level: "INFO"                     # "DEBUG"|"INFO"|"WARNING"|"ERROR"|"CRITICAL"
  save_checkpoints: false               # Save model checkpoints during training
  checkpoint_interval: 200              # Save checkpoint every N samples (≥1)

# System Configuration (OPTIONAL)
# Hardware and performance optimization settings
system:
  use_gpu: true                         # Use GPU acceleration (default: true)
  memory_limit_gb: 32.0                 # Memory limit in GB (auto-detect if not specified)
  n_cpu_cores: 8                        # Number of CPU cores (auto-detect if not specified)

# =============================================================================
# EXPERIMENT-SPECIFIC CONFIGURATIONS
# =============================================================================

# Data Validation Experiment
data_validation:
  preprocessing_strategies:
    minimal:
      enable_advanced_preprocessing: false
      imputation_strategy: "mean"

    standard:
      enable_advanced_preprocessing: true
      imputation_strategy: "median"
      feature_selection_method: "none"         # Skip feature selection by default
      variance_threshold: 0.01                 # Only used if feature_selection_method changed to "variance"

    statistical:
      enable_advanced_preprocessing: true
      imputation_strategy: "median"
      feature_selection_method: "statistical"
      n_top_features: 500

    mutual_info:
      enable_advanced_preprocessing: true
      imputation_strategy: "median"
      feature_selection_method: "mutual_info"
      n_top_features: 500

    combined:
      enable_advanced_preprocessing: true
      imputation_strategy: "median"
      feature_selection_method: "combined"
      n_top_features: 500
      variance_threshold: 0.01

    spatial_preserving:
      enable_advanced_preprocessing: false
      enable_spatial_processing: false
      imputation_strategy: "median"
      feature_selection_method: "none"
      variance_threshold: 0.0
      missing_threshold: 1.0

    differentiated_imaging_clinical:
      enable_advanced_preprocessing: true
      enable_spatial_processing: false
      imputation_strategy: "median"
      feature_selection_method: "none"             # Skip feature selection - preserve all voxels for spatial mapping
      variance_threshold: 0.01                     # Only used if feature_selection_method changed to "variance"
      missing_threshold: 0.5
      imaging_preserve_voxels: true                # Preserve all imaging voxels for spatial mapping
      enable_pca: false                            # PCA dimensionality reduction (disabled by default)
      pca_n_components: null                       # Number of PCA components (null = use variance threshold)
      pca_variance_threshold: 0.95                 # Retain 95% of variance if pca_n_components is null
      pca_whiten: false                            # Whiten PCA components

    optimized:
      enable_advanced_preprocessing: true
      optimize_preprocessing: true
      cross_validate_sources: true

    clinical_focused:
      enable_advanced_preprocessing: true
      imputation_strategy: "median"
      feature_selection_method: "statistical"
      n_top_features: 300
      variance_threshold: 0.005           # More stringent for clinical applications

    # PCA-based dimensionality reduction strategies
    # Based on MAD elbow analysis (21.5% retention) and N/D ratio optimization

    pca_balanced:
      enable_advanced_preprocessing: true
      imputation_strategy: "median"
      feature_selection_method: "none"    # Use PCA instead of feature selection
      enable_pca: true
      pca_n_components: null
      pca_variance_threshold: 0.85        # 85% variance (~120 components, N/D≈0.74:1)
      pca_whiten: false
      # RECOMMENDED: Best balance of compression and information retention
      # Use with K=10 factors

    pca_aggressive:
      enable_advanced_preprocessing: true
      imputation_strategy: "median"
      feature_selection_method: "none"
      enable_pca: true
      pca_n_components: null
      pca_variance_threshold: 0.80        # 80% variance (~90 components, N/D≈0.89:1)
      pca_whiten: false
      # Most aggressive compression, best N/D ratio
      # Use with K=10 factors
      # Closest to MAD elbow (21.5% retention)

    pca_conservative:
      enable_advanced_preprocessing: true
      imputation_strategy: "median"
      feature_selection_method: "none"
      enable_pca: true
      pca_n_components: null
      pca_variance_threshold: 0.90        # 90% variance (~150 components, N/D≈0.59:1)
      pca_whiten: false
      # More information retained, less compression
      # Use with K=8 factors (reduced to improve N/D ratio)

# Clinical Validation Experiment
clinical_validation:
  validation_types:
    - "pd_subtype_discovery"            # PD subtype discovery using unsupervised clustering (RECOMMENDED)
    # NOTE: "subtype_classification" disabled - requires real clinical subtype labels (not available in qMAP-PD)
    # - "subtype_classification"          # PD subtype prediction (requires predefined labels)
    # - "disease_progression"             # Disease progression modeling (placeholder - not implemented)
    # - "biomarker_discovery"             # Novel biomarker identification (placeholder - not implemented)
    #
    # WARNING: Do NOT add "clinical_stratified_cv" for unsupervised subtyping!
    # - "clinical_stratified_cv"          # CV is ONLY for supervised tasks with known labels
    #                                     # For unsupervised subtyping, use "pd_subtype_discovery" which trains on all data

  # NOTE: classification_metrics section removed - not applicable for unsupervised subtype discovery
  # If you add "subtype_classification" validation type (requires ground truth labels),
  # you'll need to add the classification_metrics configuration back.

  cross_validation:
    n_folds: 10                         # Robust CV for clinical validation
    stratified: true                    # Maintain class balance

  # Integrated SGFA + Clinical Optimization (moved from performance_benchmarks)
  integrated_sgfa_clinical_optimization:
    sgfa_performance_metrics:
      - "training_time"                   # How long does SGFA training take
      - "memory_usage"                    # Peak memory consumption during SGFA
      - "convergence_rate"                # How quickly SGFA converges
      - "factor_extraction_time"          # Time to extract factor scores
      - "mcmc_sampling_efficiency"        # Effective sample size per second

    pd_subtype_discovery_metrics:
      - "subtype_stability_time"          # Time to achieve stable cluster assignments
      - "clinical_validation_speed"       # Speed of clinical correlation analysis
      - "optimal_k_detection_time"        # Time to find optimal number of subtypes
      - "clustering_quality_score"        # Silhouette/Calinski-Harabasz scores
      - "subtype_robustness"              # Consistency across random seeds

    clinical_translation_metrics:
      - "factor_interpretability_score"   # Clinical meaningfulness of factors
      - "subtype_clinical_separation"     # Clinical difference between subtypes
      - "biomarker_discovery_efficiency"  # Speed of finding clinical correlates
      - "cross_validation_stability"      # Subtype stability in CV folds

    # Performance-Discovery trade-off analysis
    trade_off_analysis:
      - "speed_vs_subtype_quality"        # SGFA speed impact on subtype quality
      - "memory_vs_stability"             # Memory optimization impact on robustness
      - "convergence_vs_clinical_validity" # Fast convergence vs clinical correlation

# Robustness Testing Experiment
# NOTE: Uses global model hyperparameters (percW, slab_df, slab_scale) from model section above
robustness_testing:
  test_scenarios:
    - "identical_seeds"                 # Same random seed should give same results
    - "different_hardware"              # Results across different hardware
    - "version_stability"               # Results across software versions

  seed_values: [42, 123, 456, 789]     # Multiple seeds to test
  n_repetitions: 3                     # Repetitions per seed

  convergence_metrics:
    - "factor_correlation"              # Correlation between factor solutions
    - "parameter_stability"             # Stability of model parameters
    - "reconstruction_consistency"      # Consistency of reconstructed data

  tolerance_thresholds:
    correlation_threshold: 0.95         # Minimum correlation for robustness
    parameter_relative_error: 0.05      # Maximum relative error in parameters
    reconstruction_error_ratio: 0.02    # Maximum reconstruction error difference

# Factor Stability Analysis Configuration
# Implements Ferreira et al. 2024 methodology for assessing factor robustness
# NOTE: Uses global model hyperparameters (percW, slab_df, slab_scale, reghsZ) from model section above
factor_stability:
  K: 20                                 # Number of latent factors
  num_chains: 4                         # Number of independent chains (4+ recommended)
  num_samples: 10000                    # MCMC samples per chain (doubled for better convergence)
  num_warmup: 2000                      # MCMC warmup samples (doubled for better convergence)
  chain_method: 'parallel'              # Chain execution: 'parallel' (2x faster on GPU), 'sequential', or 'vectorized'

  # Factor matching parameters (Ferreira et al. 2024)
  cosine_threshold: 0.8                 # Minimum cosine similarity for matching (0.7-0.9)
  min_match_rate: 0.5                   # Minimum fraction of chains (>50%)

  # Effective factor counting parameters
  sparsity_threshold: 0.01              # Minimum loading magnitude to be non-zero
  min_nonzero_pct: 0.05                 # Minimum fraction of non-zero loadings (5%)

  # MCMC sampler parameters
  target_accept_prob: 0.8               # MCMC acceptance probability (0.6-0.95, default: 0.8)
  max_tree_depth: 13                    # Maximum tree depth for NUTS sampler (10-15, default: 13)

# =============================================================================
# CONFIGURATION EXAMPLES FOR DIFFERENT USE CASES
# =============================================================================

# Example configurations for different scenarios:
#
# DEVELOPMENT (fast testing):
# model:
#   K: 3
#   num_samples: 100
#   num_chains: 1
#
# RESEARCH (balanced performance/quality):
# model:
#   K: 8
#   num_samples: 2000
#   num_chains: 2
#
# PRODUCTION (highest quality):
# model:
#   K: 10
#   num_samples: 5000
#   num_chains: 4
# cross_validation:
#   n_folds: 10
#   n_repeats: 5
#
# HIGH-PERFORMANCE (optimized for speed):
# model:
#   num_samples: 500
#   num_chains: 1
# preprocessing:
#   strategy: "minimal"
# system:
#   use_gpu: true
#   n_cpu_cores: 16